/*
 * Copyright 2025 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(tagged_stream_buffer_filler.h) */
/* BINDTOOL_HEADER_FILE_HASH(8559fb685f37b8ae6f4f8a9aede49ae6)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/sprobe/tagged_stream_buffer_filler.h>
// pydoc.h is automatically generated in the build directory
#include <tagged_stream_buffer_filler_pydoc.h>

template<class IN_T>
void bind_tagged_stream_buffer_filler_template(py::module& m, const char* classname){

    using tagged_stream_buffer_filler = gr::sprobe::tagged_stream_buffer_filler<IN_T>;

    py::class_<
        tagged_stream_buffer_filler,
        gr::tagged_stream_block,
        gr::block,
        gr::basic_block,
        std::shared_ptr<tagged_stream_buffer_filler>>(m, classname)
        
        .def(
            py::init(&tagged_stream_buffer_filler::make),
            py::arg("buffer_len"),
            py::arg("length_tag_key") = "packet_len")
        .def("buffer_len", &tagged_stream_buffer_filler::buffer_len)
        .def("set_buffer_len", &tagged_stream_buffer_filler::set_buffer_len, py::arg("buffer_len"));
        
}

void bind_tagged_stream_buffer_filler(py::module& m) {
    bind_tagged_stream_buffer_filler_template<gr_complex>(m, "tagged_stream_buffer_filler_c");
    bind_tagged_stream_buffer_filler_template<float>(m, "tagged_stream_buffer_filler_f");
    bind_tagged_stream_buffer_filler_template<std::uint8_t>(m, "tagged_stream_buffer_filler_b");
    bind_tagged_stream_buffer_filler_template<std::int16_t>(m, "tagged_stream_buffer_filler_s");
    bind_tagged_stream_buffer_filler_template<std::int32_t>(m, "tagged_stream_buffer_filler_i");
}
