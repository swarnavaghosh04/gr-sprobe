/*
 * Copyright 2025 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(packet_extractor.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(706ab95aa454c5dddb60c2dde297a6b3)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/sprobe/packet_extractor.h>
// pydoc.h is automatically generated in the build directory
#include <packet_extractor_pydoc.h>

template<class IN_T>
void bind_packet_extractor_template(py::module& m, const char* classname){

    using packet_extractor = gr::sprobe::packet_extractor<IN_T>;

    py::class_<
        packet_extractor,
        gr::block,
        gr::basic_block,
        std::shared_ptr<packet_extractor>>(m, classname)
        
        .def(
            py::init(&packet_extractor::make),
            py::arg("start_tag_name") = "packet_len",
            py::arg("end_tag_name") = "packet_end")
            
        .def("start_tag_name", &packet_extractor::start_tag_name)
        .def("end_tag_name", &packet_extractor::end_tag_name)
        .def("set_start_tag_name", &packet_extractor::set_start_tag_name, py::arg("start_tag_name"))
        .def("set_end_tag_name", &packet_extractor::set_end_tag_name, py::arg("end_tag_name"));
}

void bind_packet_extractor(py::module& m) {
    bind_packet_extractor_template<gr_complex>(m, "packet_extractor_c");
    bind_packet_extractor_template<float>(m, "packet_extractor_f");
    bind_packet_extractor_template<std::uint8_t>(m, "packet_extractor_b");
    bind_packet_extractor_template<std::int16_t>(m, "packet_extractor_s");
    bind_packet_extractor_template<std::int32_t>(m, "packet_extractor_i");
}


