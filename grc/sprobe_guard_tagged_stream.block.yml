id: sprobe_guard_tagged_stream_x
label: Guard Tagged Stream
flags: [ python, cpp ]
category: '[sprobe]'

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: in_type
  label: Input Type
  dtype: enum
  options: [complex, float, byte, short, int]
  option_attributes:
    fcn: [c, f, b, s, i]
  hide: part
- id: length_tag_key
  label: Length Tag Key
  dtype: string
  default: packet_len

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: stream
  dtype: ${ in_type }

outputs:
- domain: stream
  dtype: ${ in_type }

templates:
  imports: from gnuradio import sprobe
  make: sprobe.guard_tagged_stream_${in_type.fcn}(${length_tag_key})

cpp_templates:
  includes: ['#include <gnuradio/sprobe/guard_tagged_stream.h>']
  declarations: 'sprobe::guard_tagged_stream_${in_type.fcn}::sptr ${id};'
  make: 'this->${id} = sprobe::guard_tagged_stream_${in_type.fcn}::make(${length_tag_key});'

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
